#!/usr/bin/env node
 // Usage:
//  setup tables:                       dumpSubstrateETL polkadot setup paraID
//    sets up dataset for all known paraIDs using substateetllog table
//  dump all chains:                    dumpSubstrateETL polkadot chains
//  dump random paraID for a day:       dumpSubstrateETL
//    This uses the "substateetllog.loaded" field to choose a logDT/paraID/relayChain
//  dump paraID 2000 for specific day:  dumpSubstrateETL polkadot 2000 2022-12-29
//  dump all xcmtransfers for a day:    dumpSubstrateETL polkadot xcmtransfers 2022-12-29
//  dump all xcmtransfers in last year: dumpSubstrateETL polkadot xcmtransfers
//  dump account matrics in last year: dumpSubstrateETL polkadot accountmatrics
//  compute xcmteleporfees: dumpSubstrateETL polkadot xcmteleportfees
//  update blocklog: dumpSubstrateETL blocklog
//  update blocklog: dumpSubstrateETL polkaholic

const { Command } = require('commander');
const fs = require('fs');
var SubstrateETL = require("./substrateetl");
var paraTool = require("./paraTool");

class SubstrateETLCLI {
    async accountmatrics(opt) {
        //console.log(o)
        let { relaychain, paraID, logDT } = opt;
        let relayChain = relaychain
        let isRange = (logDT == 'range')? true : false
        let isDryRun = (opt.dry)? true : false
        switch (relaychain) {
            case 'kusama':
            case 'polkadot':
                break;
            default:
                console.log(`Unsupported relaychain ${relaychain}.`)
                return;
        }
        if (!paraTool.isNumeric(paraID) && paraID != 'all'){
            console.log(`Invalid paraID args:${paraID}`)
            return
        }
        var substrateetl = new SubstrateETL();
        if (isRange){
            await substrateetl.dump_account_matrics_range(relayChain, null, paraID, isDryRun);
        }else if (logDT){
            await substrateetl.dump_account_matrics(logDT, relayChain, paraID, isDryRun);
        }else{
            console.log(`logDT missing`)
        }
    }
}

async function main() {
    let cli_version = '0.0.1'
    const program = new Command();
    program
	.name('dumpETL')
	.description('dump substrate ETL')
	.version(`${cli_version}`);

    program.command('accountmatrics')
	.description('Dump accuntmetric for a chain')
	.option('-r, --relaychain <relaychain>', 'relaychain (polkadot or kusama)', 'polkadot')
    .option('-p, --paraID <paraID>', `Targeted paraID (relaychain itself is identified using paraID=0). If not specified, crawl for all reachable parachains.`, 'all')
    .option('-dt, --logDT <logDT>', `LogDT in YYYYMMDD. If not specified, generate logs for all days since 2023-02-01`, '2023-02-01')
    .option('-d, --dry', `dry run the cmd without updating`, false)
	.action(async (opt) => {
	    let dumpcli = new SubstrateETLCLI();
	    await dumpcli.accountmatrics(opt);
	});

    await program.parseAsync(process.argv);
}

main()
    .then(() => {
        process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
