#!/usr/bin/env node
// Usage:  xcmperiod [forceRematch(Default true)] [chainID(default 'all')] [logDT] [hrs]
var XCMManager = require("./xcmmanager");
var paraTool = require("./paraTool");

async function main() {
    let chainID = 'all';

    var manager = new XCMManager();
    manager.init_xcm_error_map();
    await manager.xcm_init()
    await manager.assetManagerInit();
    //let chain = await manager.getChain(chainID);
    //await manager.setupAPI(chain);

    //manager.setDebugLevel(paraTool.debugNoLog)
    manager.setDebugLevel(paraTool.debugErrorOnly)
    //manager.setDebugLevel(paraTool.debugInfo)
    //manager.setDebugLevel(paraTool.debugVerbose)
    //manager.setDebugLevel(paraTool.debugTracing)
    let [logDT, hr] = paraTool.ts_to_logDT_hr(Math.floor(Date.now() / 1000) - 3600)
    //let logDT = "2021-11-18";
    let hrs = [hr];
    let forceRematch = true;

    process.argv.forEach(function(val, index, array) {
        if (index == 2 && val.length > 0) {
            forceRematch = parseInt(val, 10);
        }
        if (index == 3 && val.length > 0) {
            chainID = val;
        }
        if (index == 4 && val.length > 0) {
            logDT = val;
        }
        if (index == 5 && val.length > 0) {
            hrs = val.split(",").map(hr => parseInt(hr, 10));
        }
    });

    for (const hr of hrs) {
        console.log(`xcmperiod forceRematch=${forceRematch}, chainID=${chainID}, [${logDT} ${hr}]`)
        await manager.matchPeriod(forceRematch, chainID, logDT, hr);
    }
}

main()
    .then(() => {
        process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
