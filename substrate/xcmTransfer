#!/usr/bin/env node

/*
Usage: xcmTransfer chainID chainIDDest amount symbol [beneficiary]

KSM:
 Karura <=> Kusama (KSM)
 ./xcmTransfer 2     22000 .01 KSM   // https://polkaholic.io/tx/0xb4353232721de67b61f735b05f1465b3962ed53e2cd7d998302a24afdccaf403 -- exception: v0...
 ./xcmTransfer 22000 2     .01 KSM   // https://polkaholic.io/tx/0x738afe4f7eb27cc49df361fe5903cbb1d1ae09db8375219b2ffcfa76f8df3ea7

 ./xcmTransfer 2 22023 .01 KSM

 Kusama <=> Parallel-Heiko (KSM)
 ./xcmTransfer 2     22085 1.0 KSM   // https://polkaholic.io/tx/0x707ca971b9f954873f3aef75bb044487e1b9740521e7b7c8a717c8888962d96c
 ./xcmTransfer 22085 2     1.0 KSM   // https://polkaholic.io/tx/0x20d9ddf6f9b008221726a9b3e146c233e587fbd09df02adf4289b8ff934ae085

 Kusama <=> Kintsugi (KSM)
 ./xcmTransfer 2     22092 1.0 KSM   // https://polkaholic.io/tx/0xf4150be70cf0e28bb752bdd9d420a11c3b7877f5f7563c91bdd358363b4eac72
 ./xcmTransfer 22092 2     1.0 KSM   // https://polkaholic.io/tx/0x5960dac78f3f6e87985c0ba1caf168d8ec632d1097378238477e07ae32e04612

 Karura <=> Bifrost-KSM (KSM)
 ./xcmTransfer 22000 22001 1.0 KSM   // https://polkaholic.io/tx/0xe975a6b27767fee8f724f79c7e29a7b6cfd516970c8c9f5001ebdd3857d900e8
 ./xcmTransfer 22001 22000 1.0 KSM   // https://polkaholic.io/tx/0x0bcc5d88fede01b79b81311b7c174ed929db0da357fed9389487e56fdc3d3141

MOVR:
 Karura <==> Moonriver (MOVR)
 ./xcmTransfer 22000 22023 1.0 MOVR  // https://polkaholic.io/tx/0x2d0196bbb82da4521e64f6bcc129f10df4652b8d09522a827df00d3063b2dcc5
 ./xcmTransfer 22023 22000 1.0 MOVR  // https://polkaholic.io/tx/0x6a106f869de0e6a451acccaa47173e8f682d27ea41ac7be60fa0b4349233d3ea -- TODO

 Shiden <==> Moonriver (MOVR)
 ./xcmTransfer 22007 22023 1.0 MOVR  // https://polkaholic.io/tx/0x38519633a2df111c61b5dcaf68f84ccbf10e4d14630e93d517ef185889309d92 -- TODO
 ./xcmTransfer 22023 22007 1.0 MOVR  // https://polkaholic.io/tx/0x51b0a8cb2a4f0dbe7982586977034ff2ed82af36b417ce3e02704be1fca25ddb -- TODO

 Parallel-Heiko <==> Moonriver (MOVR)
 ./xcmTransfer 22085 22023 1.0 MOVR  // https://polkaholic.io/tx/0x4fe33a7149c39ec9626baf3c59f4cb693175e7f0d2f19f43ebd457b74dbeb561
 ./xcmTransfer 22023 22085 1.0 MOVR  // https://polkaholic.io/tx/0xda7b756bb17b0940539220f1cbf4c495ebb356ed1246c72aa4e7dbeeeff41e36 -- TODO

KINT:
 Karura <=> Kintsugi (KINT)
 ./xcmTransfer 22000 22092 1.0 KINT  // https://polkaholic.io/tx/0xb7a7f4d48caa19335739989a756887afedf2a458a8cff4e43675d79d3d0fcc9c
 ./xcmTransfer 22092 22000 1.0 KINT  // https://polkaholic.io/tx/0x90ad8ac2d0795540d540fb05a32def025ca6debb351dcdf9a06f069c01379ef6

 Kintsugi <=> Moonriver (KINT)
 ./xcmTransfer 22092 22023 1.0 KINT  //
 ./xcmTransfer 22023 22092 1.0 KINT  //

BNC:
 Karura <=> Bifrost-KSM (BNC)
 ./xcmTransfer 22000 22001 1.0 BNC   // https://polkaholic.io/tx/0x3acb4bc43ee9d76be319d469880e7ac538cfdcd598a97de45785dbf866299dcf
 ./xcmTransfer 22001 22000 1.0 BNC   // https://polkaholic.io/tx/0xb3a99967fdef5546259c7eaea9335279dd09786ebe515461d93342f27c785f88

CSM: https://polkaholic.io/symbol/CSM#chains
 Karura <=> Crust Shadow (CSM)
 ./xcmTransfer 22000 22012 1.0 CSM   // https://polkaholic.io/tx/0x1c484e663404d43c9b9f5e96e7ea1b691635062f0d3cd46c3450cdc6aa4682fd
 ./xcmTransfer 22012 22000 1.0 CSM   // https://polkaholic.io/tx/0x37cead4d13de258de3b709b23c1f3c694dd8582cad8d4edf6188b695b278dd91

 Crust Shadow <=> Moonriver (CSM)
 ./xcmTransfer 22012 22023 1.0 CSM   //
 ./xcmTransfer 22023 22012 1.0 CSM   //

PHA: https://polkaholic.io/symbol/PHA#chains
 Khala <=> Moonriver (PHA)
 ./xcmTransfer 22004 22023 1.0 PHA   //
 ./xcmTransfer 22023 22004 1.0 PHA   //

 Khala <=> Parallel-Heiko (PHA)
 ./xcmTransfer 22004 22085 1.0 PHA   //
 ./xcmTransfer 22084 22005 1.0 PHA   //

 Khala <=> Calamari (PHA)
 ./xcmTransfer 22004 22084 1.0 PHA   //
 ./xcmTransfer 22084 22004 1.0 PHA   //

 Karura <==> Khala (PHA)
 ./xcmTransfer 22000 22004 1.0 PHA   // https://polkaholic.io/tx/0x688526b4c781f9009fd7e64bdba25cbba06ef345a3e19c8a9a23264075975ea6
 ./xcmTransfer 22004 22000 1.0 PHA   // https://polkaholic.io/tx/0x0e1957a946fde7a57bd52a1f1caf83ef4ed8bfd3c6483ebbcdd104c26cc3cc97 -- TODO

KUSD:
 Karura <==> Moonriver (KUSD)
 ./xcmTransfer 22000 22023 1.0 KUSD  // https://polkaholic.io/tx/0xd5ca2b7204871cb0e6f36b1e101883c95833ac846d1db0e52e1eeb8766acab3c
 ./xcmTransfer 22023 22000 1.0 KUSD  // https://polkaholic.io/tx/0x31ab937f69cb686be5ecfe5cdae7be91acc2900d909a0d089cd74edc7fa0f80c -- TODO

AIR:
 Karura <=> Altair (AIR)
 ./xcmTransfer 22000 22088 1.0 AIR   // https://polkaholic.io/tx/0xe0a993118813fbacf6462c3fd21de6941dd82937e2de4f3552fd2d4be4664816
 ./xcmTransfer 22088 22000 1.0 AIR   // https://polkaholic.io/tx/0xb83a9cfe4da9593b5f303b785cce0bf25a8a0b5953ce0e317dc12a91ab626c6d

QTZ:
 Karura <=> Quartz (QTZ)
 ./xcmTransfer 22000 22095 1.0 QTZ   // https://polkaholic.io/tx/0xa994b3f4ba936cafdd85d9513b54a4d67645881634c835a71a1cd70e33c3849d
 ./xcmTransfer 22095 22000 1.0 QTZ   // https://polkaholic.io/tx/0xf5e84c9f5355df40f0430279b9b525d8eacc9d75fcb4a8d92f09cce2c06742cb -- TODO

RMRK: https://polkaholic.io/symbol/RMRK#chains
 Statemine <=> Moonriver (RMRK)
 ./xcmTransfer 21000 22023 1.0 RMRK  // https://polkaholic.io/tx/0x86c9195f0985411f8633b95c21da02287ca616d2c88430cfa9e385e74ab79a98
 ./xcmTransfer 22023 21000 1.0 RMRK  // https://polkaholic.io/tx/0x64574083ac92956bfecff160086bcb3a8cd6c4aff1d2a36656e203991a92070c -- TODO

 Statemine <==> Karura (RMRK)
 ./xcmTransfer 21000 22000 1.0 RMRK  // https://polkaholic.io/tx/0xb4fa455ed4aa0786220043de74888cf4e7b81edd440d777b8cfdcc29e87f75d9 check
 ./xcmTransfer 22000 21000 1.0 RMRK  // https://polkaholic.io/tx/0xc15f8da2060f2b47e3dd55d1888605d690a2be050ad2ed627b7d3b17a48bacd9

DOT: https://polkaholic.io/symbol/DOT#chains
 Polkadot <=> Moonbeam (DOT)
 ./xcmTransfer 0 2004 .01 DOT    // https://polkaholic.io/tx/0x820382a0c4861d578dc4889b98a919570eae373a40a4e2fb483089dfa122a935
 ./xcmTransfer 2004 0 .01 DOT    // https://polkaholic.io/tx/0x867595512d40eba3e0b537d4a3140e4dbc781e0748ccce8ed8191c46c1fa1d5a -- TODO

 Polkadot <=> Astar (DOT)
 ./xcmTransfer 0 2006 .01 DOT    // https://polkaholic.io/tx/0x1baa971bca5964fe745340114c390e1c637dcdfd4808ec2df3dc0b98d831417b
 ./xcmTransfer 2006 0 .01 DOT    // https://polkaholic.io/tx/0x2f86f421257b70b9748203f55af0d8cf55a576d5a47efce0a549899e542d1f61 -- TODO

 Polkadot <=> Parallel (DOT)
 ./xcmTransfer 0 2012 .01 DOT    // https://polkaholic.io/tx/0x92adfe1604c0320826d06f4228bc281f08e7b9c983c0ba71d3039799c59acde6
 ./xcmTransfer 2012 0 .01 DOT    // https://polkaholic.io/tx/0x7837ccf0290c8edc1985880356e37390a6e01d0f63529a54bae214918d393382

 Polkadot <=> Acala (DOT)
 ./xcmTransfer 0 2000 .01 DOT    // https://polkaholic.io/tx/0x14105b98d52392f22bf55bd99b848ac52a7fb3a6468cb4042a3557548f57ff87
 ./xcmTransfer 2000 0 .01 DOT    // disabled

 Polkadot <=> Interlay (DOT)
  ./xcmTransfer 0 2032 .01 DOT   // https://polkaholic.io/tx/0x3a646a871169f34a15b526436809e5c7cbbd1ecb630cb5bca758b403ac93b560 -- no asset

INTR: https://polkaholic.io/symbol/INTR#chains
 Interlay <=> Moonbeam (INTR)
  ./xcmTransfer 2032 2004 1.0 INTR // https://polkaholic.io/tx/0x01bb1d440a3b7cbf19bfd0d351e1a4d881ae92a13c21a07ef2f7ee946edfcdc0 -- check
  ./xcmTransfer 2004 2032 1.0 INTR // https://polkaholic.io/tx/0xfa45b6be66bb817851c583a5418071aa5b81b5ca519e65103e86cf5b4b4e589e -- TODO
 Interlay <=> Acala (INTR) [disabled]

GLMR: https://polkaholic.io/symbol/GLMR#chains
 Moonbeam <=> Parallel (GLMR)
 ./xcmTransfer 2004 2012 1.0 GLMR  // https://polkaholic.io/tx/0xc6a19326c3f4f11637cfd64eb5ee20f46721f81387f14b4e458d317f2781a7b2 -- TODO
 ./xcmTransfer 2012 2004 1.0 GLMR  // https://polkaholic.io/tx/0xfaebf4da5ab6633ea06d6d8d0ed9c08f93196010af87d759efa23f73dffea3cb

 Moonbeam <=> Astar (GLMR)
 ./xcmTransfer 2004 2006 1.0 GLMR  // https://polkaholic.io/tx/0x8623135d6e3c6c40daa6e888a8ab7d0b2b40922e873792bd26472cf3229bc008 -- TODO
 ./xcmTransfer 2006 2004 1.0 GLMR  // https://polkaholic.io/tx/0x018122c050318c7a3ae8ad13c8cdc122aac85001ec0b448a737b72a6f1a53faf -- TODO

 Moonbeam <==> Acala (GLMR)
 ./xcmTransfer 2004 2000 1.0 GLMR  // TODO: evm transfer https://polkaholic.io/tx/0x1a359894db4c2997cef40c85e5a74037cf1fb2c49a1989a289347da16b6a26e0
 ./xcmTransfer 2000 2004 1.0 GLMR  // disabled

PARA: https://polkaholic.io/symbol/PARA#chains
 Parallel <=> Moonbeam (PARA)
 ./xcmTransfer 2012 2004 .01 PARA  // https://polkaholic.io/tx/0xfaebf4da5ab6633ea06d6d8d0ed9c08f93196010af87d759efa23f73dffea3cb
 ./xcmTransfer 2004 2012 .01 PARA  // https://polkaholic.io/tx/0xcd87bea0acebed1a0d103f5ca77f909e551317fba917c287c1c524fbb7c02d02 -- TODO

 Acala <==> Parallel (PARA)
 ./xcmTransfer 2012 2000 1.0 PARA  // https://polkaholic.io/tx/0xab8bd4a6224d46f37ca5598c74ece82da994597f32af5e5670a2dfa1fde161e9
 ./xcmTransfer 2000 2012 1.0 PARA  // disabled

ASTR: https://polkaholic.io/symbol/ASTR#chains
 Astar <=> Moonbeam (ASTR)
 ./xcmTransfer 2006 2004 1.0 ASTR //
 ./xcmTransfer 2004 2006 1.0 ASTR //

 Astar <=> Acala (ASTR)
 ./xcmTransfer 2006 2000 1.0 ASTR //
 ./xcmTransfer 2000 2006 1.0 ASTR //

IBTC: https://polkaholic.io/symbol/IBTC#chains
 Interlay <==> Moonbeam (IBTC)
 ./xcmTransfer 2032 2004 1.0 IBTC // https://polkaholic.io/tx/0xe8ab0a139dc32be1ed8baa32a9586ac6b7efb6c4f7a346fc4f71befb8a2df198 -- check
 ./xcmTransfer 2004 2032 1.0 IBTC // https://polkaholic.io/tx/0x76edab61b190e0c86dd81e59125370eaa2643c846df0fb2cc93644a15216f654

 Interlay <=> Acala (IBTC)
 ./xcmTransfer 2000 2032 1.0 IBTC // ["error mint"]
 ./xcmTransfer 2032 2000 1.0 IBTC // ["error mint"]

ACA: https://polkaholic.io/symbol/ACA#chains
 Acala <==> Parallel (ACA)
 ./xcmTransfer 2000 2012 1.0 ACA  //
 ./xcmTransfer 2012 2000 1.0 ACA  //

 Acala <=> Moonbeam (ACA)
 ./xcmTransfer 2000 2004 1.0 ACA  //
 ./xcmTransfer 2004 2000 1.0 ACA  // https://polkaholic.io/tx/0x0a71af022c8b2bb6d909387eede206adf9f5ef99b0a32e43c94ef19519ebe9da
*/
const XCMTransfer = require("./xcmtransfer");
const ethTool = require("./ethTool");
const paraTool = require("./paraTool");

async function main() {
    let chainID = 61000;
    let chainIDDest = 60888;
    let amount = .02;
    let symbol = "AlphaDev";
    let beneficiary = "0xdcb4651b5bbd105cda8d3ba5740b6c4f02b9256d"
    let beneficiarySubstrate = "0xd2473025c560e31b005151ebadbc3e1f14a2af8fa60ed87e2b35fa930523cd3c"
    let beneficiaryEVM = "0xdcb4651b5bbd105cda8d3ba5740b6c4f02b9256d"; //0xeaf3223589ed19bcd171875ac1d0f99d31a5969c";
    let isNonDefaultBeneficiary = false
    //xcmTransfer chainID chainIDDest amount symbol beneficiary

    process.argv.forEach(function(val, index, array) {
        if (index == 2 && val.length > 0) {
            chainID = parseInt(val, 10);
        }
        if (index == 3 && val.length > 0) {
            chainIDDest = parseInt(val, 10);
        }
        if (index == 4 && val.length > 0) {
            amount = parseFloat(val);
        }
        if (index == 5 && val.length > 0) {
            symbol = val;
        }
        if (index == 6 && val.length > 0) {
            beneficiary = val
            isNonDefaultBeneficiary = true
        }
    });

    const xcmtransfer = new XCMTransfer();
    await xcmtransfer.init() //wait for cryptoReady here
    xcmtransfer.setupPair();
    xcmtransfer.setupEvmPair();
    xcmtransfer.setupEvmPairFromMnemonic()

    if (chainIDDest == paraTool.chainIDMoonbeam || chainIDDest == paraTool.chainIDMoonriver || chainIDDest == paraTool.chainIDAstar || chainIDDest == paraTool.chainIDShiden) {
        if (!isNonDefaultBeneficiary){
            beneficiary = beneficiaryEVM;
        }
    }
    //validate cli inputs
    let [isValidBeneficiary, desc] = xcmtransfer.validateBeneficiaryAddress(chainIDDest, beneficiary)
    if (!isValidBeneficiary){
        console.error('ERROR', desc);
        process.exit(1);
    }
    let execute = true;
    let executionInput = {
        execute: execute,
        origination: chainID,
        destination: chainIDDest,
        symbol: symbol,
        amount: amount,
        beneficiary: beneficiary,
    }
    let [sectionMethod, func, args, isEVMTx] = await xcmtransfer.xcmtransfer(chainID, chainIDDest, symbol, amount, beneficiary);
    console.log(`xcmtransfer cli executionInput`, executionInput)
    let argsStr = JSON.stringify(args, null, 4)
    console.log(`xcmtransfer cli transcribed ${sectionMethod} args`, argsStr);

    // temp
    let chainIDRelay = 60000;
    let paraID = ( chainID - chainIDRelay ) ;
    let paraIDDest = ( chainIDDest - chainIDRelay );
    await xcmtransfer.setupAPIs(paraID, paraIDDest, chainIDRelay);

    if ( isEVMTx ) {
        var txStruct = args
        var web3Api = func
        var signedTx = await ethTool.signEvmTx(web3Api, args, xcmtransfer.evmpair)
        var decodedTx = ethTool.decodeRLPTransaction(signedTx.rawTransaction)
        console.log(`signedTx`, signedTx)
        console.log(`decodedTx`, decodedTx)
        if ( execute ) {
            console.log(`***** broadcasting signed evmTx`)
            //if execute true, brocast the tx
            let txHash = signedTx.transactionHash
            console.log("EVM Transfer sent with hash", txHash);
            console.log(`View Transaction: https://polkaholic.io/tx/${txHash}`);
            var result = await ethTool.sendSignedTx(web3Api, signedTx)
            console.log(`signedTX result=`, result)
        }
    } else {
        console.log(args);

	let xcmTxn = func.apply(null, args)
        const { partialFee, weight } = await xcmTxn.paymentInfo(xcmtransfer.pair);
        console.log(`Est. extrinsics weight=${weight}, weight fees=${partialFee.toHuman()}`);
	console.log("encoded", xcmTxn.toHex());
        if (execute) {
            console.log(`broadcasting signed extrinsics`)
            let hash = await xcmTxn.signAndSend(xcmtransfer.pair);
            let extrinsicHash = hash.toHex()
            console.log("Transfer sent with hash", hash.toHex());
            console.log(`View extrinsics: https://polkaholic.io/tx/${extrinsicHash}`);
        }
    }
}

main()
    .then(() => {
        //process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
