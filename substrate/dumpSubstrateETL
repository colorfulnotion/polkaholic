#!/usr/bin/env node
// Usage: 
//  setup tables:                       dumpSubstrateETL polkadot setup
//    sets up dataset for all known paraIDs using substateetllog table
//  dump all chains:                    dumpSubstrateETL polkadot chains
//  dump random paraID for a day:       dumpSubstrateETL
//    This uses the "substateetllog.loaded" field to choose a logDT/paraID/relayChain 
//  dump paraID 2000 for specific day:  dumpSubstrateETL polkadot 2000 2022-12-29
//  dump all xcmtransfers for a day:    dumpSubstrateETL polkadot xcmtransfers 2022-12-29
//  dump all xcmtransfers in last year: dumpSubstrateETL polkadot xcmtransfers 

var SubstrateETL = require("./substrateetl");

async function main() {
    let relayChain = null;
    let paraID = -1;
    let logDT = null;
    process.argv.forEach(function(val, index, array) {
        if (index == 2 && val.length > 0) {
            relayChain = val;
        }
        if (index == 3 && val.length > 0) {
	    // TODO: use flags pkg instead
	    if ( val == "xcmtransfers"  || val == "chains" || val == "setup" ) { 
		paraID = val;
	    } else {
		paraID = parseInt(val, 10);
	    }
        }
        if (index == 4 && val.length > 0) {
            logDT = val;
        }
    });

    var substrateetl = new SubstrateETL();
    if ( paraID == "setup" && relayChain ) {
	await substrateetl.setup_tables(relayChain);
    } else if ( paraID == "xcmtransfers" && relayChain ) {
	if ( logDT ) {
            await substrateetl.dump_xcmtransfers(logDT, relayChain);
	} else {
            await substrateetl.dump_xcmtransfers_range(relayChain, 400);
	}
    } else if ( paraID == "chains" && relayChain ) {
        await substrateetl.dump_chains(relayChain);
    } else if ( paraID >= 0 && logDT && relayChain ) {
	await substrateetl.dump_substrateetl(logDT, paraID, relayChain);
    } else {
	while ( true ) {
	    let x = await substrateetl.get_random_substrateetl(logDT, paraID, relayChain);
	    logDT = x.logDT;
	    paraID = x.paraID;
	    relayChain = x.relayChain;
	    console.log("READY ", logDT, paraID, relayChain);
	    if ( logDT && ( paraID >= 0 ) && relayChain ) {
		await substrateetl.dump_substrateetl(logDT, paraID, relayChain);
		await substrateetl.sleep(1000);
	    }  else {
		await substrateetl.sleep(10000);
	    }
	}
    }
}

main()
    .then(() => {
        console.log("finishing...")
        process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
