#!/usr/bin/env node
// indexBlock [chainID] [blockNumber] [blockHash]
var CrawlerManager = require("./crawlermanager");
const ethTool = require("./ethTool");
const paraTool = require("./paraTool");
let isDevelopment = (process.env.NODE_ENV == "development") ? true : false
var debugLevel = paraTool.debugErrorOnly
if (isDevelopment){
    //debugLevel = paraTool.debugTracing
    debugLevel = paraTool.debugInfo
    console.log(`[isDevelopment:${isDevelopment}] debugLevel: ${debugLevel}`)
}

async function main() {
    let relayChainID = paraTool.chainIDPolkadot;
    let blockNumber = 12855329; // this is the hrmp
    let blockExtra = 7;
    let relayChainIDs = [paraTool.chainIDPolkadot, paraTool.chainIDKusama, paraTool.chainIDMoonbaseRelay]
    //let blockHash = "0x44a1fe068af3ae83f99dd90efa6bbf5ebbf92972adde190e8b3e5d1f3d513017"; //substrate
    //let evmBlockHash = "0xdf092452d679df2cef2d83dbf818f73cae470fca6192d646b04f383e35df60ee"; //evm
    //0xd097ce2e3a2a5a6068c51f356df6fca90b07399fc9ea72d6b344236580960394 (acala 2258177-2 @12855329)
    process.argv.forEach(function(val, index, array) {
        if (index == 2 && val.length > 0) {
            relayChainID = paraTool.dechexToInt(val);
        }
        if (index == 3 && val.length > 0) {
            blockNumber = paraTool.dechexToInt(val);
        }
        if (index == 4 && val.length > 0) {
            blockExtra = paraTool.dechexToInt(val);
        }
    });
    if (!relayChainIDs.includes(relayChainID)){
        console.log(`Invalid relay chainID provided ${relayChainID}`)
    }
    let crawlermanager = new CrawlerManager();
    await crawlermanager.initManagerState()
    crawlermanager.setDebugLevel(debugLevel)
    crawlermanager.exitOnDisconnect = true;
    await crawlermanager.initRelayCrawler(relayChainID)
    let relayCrawler = crawlermanager.getRelayCrawler()
    let blocks = []
    for (let i = blockNumber; i < blockNumber+blockExtra; i++) {
        let blockHash = await crawlermanager.getBlockHashFinalized(relayChainID, i)
        let r = {
            blockNumber: i,
            blockHash: blockHash
        }
        blocks.push(r)
    }

    if (debugLevel >= paraTool.debugInfo) console.log(`[relayChain=${relayCrawler.chain.chainName}] target blocks`, blocks)
    let xcmMetaMapStr = await crawlermanager.indexBlockRanges(relayCrawler, blocks)
    if (debugLevel >= paraTool.debugInfo) console.log(`xcmMetaMapStr`, xcmMetaMapStr)
    let xcmMap = crawlermanager.decodeXcmMetaMap(xcmMetaMapStr)
    console.log(`xcmMap`, xcmMap)
    return
    let [blockRangeMap, hrmpRangeMap] = await crawlermanager.analyzeXcmMap(xcmMap)
    if (debugLevel >= paraTool.debugInfo) console.log(`blockRangeMap`, blockRangeMap)
    //TODO: not handling missing traces for now
    await crawlermanager.processIndexRangeMap(blockRangeMap)
    let mMsg = crawlermanager.processReceivedmsg()
    console.log(`mMsg`, mMsg)
}

main()
    .then(() => {
        process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
