<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>XCM Scan</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="description" content="xcm scan" />
<meta name="robots" content="index, follow" />
<style>
  .chain {
      width: 200px;
      margin: 10px;
      padding: 10px;
    }

  .block {
      width: 80px;
   
  }
    .xcmmessage {
	background-color: #FFAAAA;
      padding: 5px;
      margin: 5px;
      border: 5px solid black;
    }

    .xcmtransfer {
      background-color: red;
      padding: 5px;
      margin: 5px;
      border: 5px solid black;
    }

    .finalized {
      background-color: #AAFFAA;
      padding: 5px;
      margin: 5px;
      border: 3px solid black;
    }

    .unfinalized {
      background-color: white;
      padding: 5px;
      margin: 5px;
      border: 1px dashed black;
    }

    .xcmtransferdestcandidate {
      background-color: white;
      padding: 5px;
      margin: 5px;
    }
</style>

<script>
let chainModel = {};
  function update_blocks(chainID, bn, msgType) {
    if ( chainModel[chainID] == undefined ) {
	chainModel[chainID] = {
	    blocksFinalized: 0,
	    lastBlockNumber: 0,
	    xcmtransfers: [],
	    xcmmessages: [],
	    xcmtransferdestcandidates: [],
	}
    }
      let c = chainModel[chainID];
      switch ( msgType ) {
      case "subscribeStorage":
	  c.lastBlockNumber = bn;
	  break;
      case "subscribeFinalizedHeads":
	  c.blocksFinalized = bn;
	  if ( c.blocksFinalized > c.lastBlockNumber ) c.lastBlockNumber = c.blocksFinalized;
	  break;
      case "xcmtransfer":
	  c.xcmtransfers.push(bn);
	  break;
      case "xcmtransferdestcandidate":
	  c.xcmtransferdestcandidates.push(bn);
	  break;
      case  "xcmmessages":
	  c.xcmmessages.push(bn);
	  break;
      }
      let out = [];
      if ( ! ( c.lastBlockNumber > 0 )  ) return;
      for (let bn = c.lastBlockNumber ; bn > c.lastBlockNumber - 10; bn-- ) {
	  let cls = ( bn > c.blocksFinalized ) ? "unfinalized" : "finalized";
	  if ( c.xcmtransfers.includes(bn) ) {
	      cls = "xcmtransfer";
	  } else if ( c.xcmmessages.includes(bn) ) {
	      cls = "xcmmessage";
	  } else if ( c.xcmtransferdestcandidates.includes(bn) ) {
	      cls = "xcmtransferdestcandidate";
	  }
	  out.push(`<span class='block ${cls}'><a target='_new' href='https://polkaholic.io/block/${chainID}/${bn}'>${bn}</a></span>`)
      }
      
      return out.join("");
  }

  function show_message(msg) {
      let bn = null;
      if ( msg.bn != undefined ) {
	  bn = msg.bn
      } else if  ( msg.blockNumber != undefined ) {
	  bn = msg.blockNumber;
      }
      if ( msg.chainID != undefined ) {
	  let chainID = msg.chainID;
	  let id = `bn${chainID}`;
	  let elem = document.getElementById(id);
	  if ( elem )  {
	      elem.innerHTML = update_blocks(chainID, bn, msg.msgType);
	  }else {
	      console.log("could not find", id, msg);
	  }
      }

      if ( msg.chainIDDest != undefined ) {
	  let chainID = msg.chainIDDest;
	  let id = `bn${chainID}`;
	  let elem = document.getElementById(id);
	  if ( elem )  {
	      elem.innerHTML = update_blocks(chainID, bn, msg.msgType);
	  }else {
	      console.log("could not find", id, msg);
	  }
      }
  }
  const ws = new WebSocket("ws://kusama-internal.polkaholic.io:9977", "polkaholic");
const chains = <%- JSON.stringify(chains); %>;
  ws.onmessage = (event) => {
      try {
	  let msg = JSON.parse(event.data)
	  switch ( msg.msgType ) {
	  case "subscribeStorage": {
	      show_message(msg)
	  }
	      break;
	  case "subscribeFinalizedHeads": {
	      show_message(msg)
	  }
	      break;
	      
	  case "xcmtransfer": {
	      show_message(msg)
	  }
	      break;
	  case "xcmmessage":
	      show_message(msg)
	      break;
	  case "xcmtransferdestcandidate": 
	      show_message(msg)
	      break;
	  default:
	      console.log("UNK", msg);
	  }
      } catch (err){

      }
}
</script>
<body>
  <h3>XCM Scan</h3>
    
    <% for (const c of chains) { %>
    <div>
      <% if ( c.chainID != undefined && c.chainName != undefined ) { %>
      <div class="chain"><%= c.chainID %>: <%= c.chainName %></div><div id='bn<%= c.chainID %>'></div>
      <% } %>
    </div>		
    <% } %>
    
</body>

</html>
