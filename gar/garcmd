#!/usr/bin/env node
// Usage: ./garcmd [relayChain] [targetedParaID]

// EX: parse all supported registry on polkadot
// Usage: ./garcmd polkadot all

// EX: test a specific parser
// Usage: ./garcmd polkadot 2004

var XCMGlobalAssetRegistry = require("./xcmgar");
const endpoints = require("./endpoints");

async function main() {
    var targetedRelaychain = 'polkadot'
    var targetedParaID = 'all'
    process.argv.forEach(function(val, index, array) {
        if (index == 2 && val.length > 0) {
            targetedRelaychain = val;
        }
        if (index == 3 && val.length > 0) {
            targetedParaID = val;
        }
    });

    var xcmgar = new XCMGlobalAssetRegistry();
    await xcmgar.initPublicEndpointsMap(targetedRelaychain)
    let supportedChains = xcmgar.getSupportedChains()
    let supportedChainKeys = Object.keys(supportedChains)
    let supportedChainHelper = xcmgar.printChainhelper()

    console.log(`[${targetedRelaychain}] SupportedChains`, supportedChainHelper)
    if(targetedParaID != 'all') {
        chainkey = `${targetedRelaychain}-${targetedParaID}`
        supportedChainKeys = [chainkey]
    }
    let failedChainkeys = await xcmgar.batchApiInit(supportedChainKeys)
    console.log(`failedChainkeys`, failedChainkeys)
    for (chainkey of supportedChainKeys){
        let crawler = await xcmgar.getCrawler(chainkey)
        if (crawler){
            await xcmgar.crawlRegistry(crawler)
        }
    }
    let chainAssetMap = xcmgar.getChainAssetMap()
    let xcmAssetMap = xcmgar.getXcmAssetMap()
    console.log(`AssetMap`, chainAssetMap)
    console.log(`XcmAssetMap`, xcmAssetMap)
    if(targetedParaID == 'all') {
        await xcmgar.updateXcmGar()
    }
    await xcmgar.updateLocalAsset()
}

main()
    .then(() => {
        console.log("finishing...")
        process.exit(0);
    })
    .catch((e) => {
        console.error('ERROR', e);
        process.exit(1);
    });
