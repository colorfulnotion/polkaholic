!function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}({3:function(t,e){var n={};n.connect=async t=>{if(window.polkadot_substrate&&document.polkadot_network==t)return Promise.resolve("connect: already connected to "+t);const e=new polkadot_api.WsProvider(t);return console.log(`connecting to ${t} ...`),window.polkadot_substrate=await polkadot_api.ApiPromise.create({provider:e}),window.polkadot_network=t,Promise.resolve(`connected to ${t}!`)},n.getBlockTimestamp=async()=>{if(!window.polkadot_network||!window.polkadot_substrate)return;const t=await polkadot_substrate.query.timestamp.now();return Promise.resolve(Date(t))},n.getBlockHash=async t=>{if(!window.polkadot_network||!window.polkadot_substrate)return;const e=await polkadot_substrate.rpc.chain.getBlockHash(t);return Promise.resolve(e.toString())},n.getAddressBalance=async t=>{if(!window.polkadot_network||!window.polkadot_substrate||!t)return;const e=await polkadot_substrate.query.system.account(t);return Promise.resolve(e&&e.data?e.data.free.toString():0)},n.getExtensionConnectedAccounts=async()=>{if(!window.polkadot_network||!window.polkadot_substrate)return;const t=await polkadot_extension_dapp.web3Accounts();return Promise.resolve(t)},n.web3Enable=async t=>{const e=await polkadot_extension_dapp.web3Enable(t);return Promise.resolve(e)},n.transferViaExtension=async(t,e,o)=>new Promise(async(a,r)=>{if(window.polkadot_network&&t&&e?window.polkadot_substrate?t?e||r("transferViaExtension: missing param to_address"):r("transferViaExtension: missing param amount"):r("transferViaExtension: polkadot web3 hasn't connected to network "+window.polkadot_network):r("transferViaExtension: polkadot web3 network hasn't been injected"),o)o=await substrate_txwrapper.deriveAddress(o);else{const t=await n.getExtensionConnectedAccounts();o=t&&t[0].address}o||r("transferViaExtension: missing param from_address");const s=await n.getAddressBalance(o);Number(s)<t&&r("transferViaExtension: insufficent balance in address "+o);const i=await polkadot_extension_dapp.web3FromAddress(o);polkadot_substrate.setSigner(i.signer);const d=await polkadot_substrate.tx.balances.transfer(e,t);d.signAndSend(o,t=>{t.status.isInBlock?console.log("Transaction included at blockHash "+t.status.asInBlock):t.status.isFinalized&&console.log("Transaction finalized at blockHash "+t.status.asFinalized)}).then(()=>{a(d)}).catch(t=>{r("transferViaExtension: something went wrong"+t)})})}});